# HTTP Server with SSL to deploy custom web vulnerability checks on the fly.

import http.server
import socketserver
import ssl
import sys
import getpass
import urllib3
from http.server import HTTPServer
from http.server import BaseHTTPRequestHandler

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class HTTPSHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_POST(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        return

    def do_PUT(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_DELETE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_OPTIONS(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_TRACE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_CONNECT(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_PATCH(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_COPY(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_MOVE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_LINK(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_UNLINK(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_UNLINK(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_PURGE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_LOCK(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_UNLOCK(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_PROPFIND(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_VIEW(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_PROPPATCH(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_MKCOL(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_REPORT(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return
        
    def do_MKACTIVITY(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_CHECKOUT(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_MERGE(self):

        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_MSEARCH(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_NOTIFY(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_SUBSCRIBE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return

    def do_UNSUBSCRIBE(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        return
    
if __name__ == '__main__':
    server_address = ('', 8000)
    httpd = HTTPServer(server_address, HTTPSHandler)
    httpd.serve_forever()


class LoggingHandler(HTTPSHandler):
    def do_GET(self):

        print(self.headers)

 
        super().do_GET()

    def do_POST(self):

        print(self.headers)


        super().do_POST()

    def do_PUT(self):

        print(self.headers)


        super().do_PUT()

    def do_DELETE(self):       

        print(self.headers)


        super().do_DELETE()

    def do_HEAD(self):

        print(self.headers)


        super().do_HEAD()

    def do_OPTIONS(self):

        print(self.headers)


        super().do_OPTIONS()

    def do_PROPFIND(self):

        print(self.headers)


        super().do_PROPFIND()

    def do_PROPPATCH(self):

        print(self.headers)


        super().do_PROPPATCH()

    def do_MKCOL(self):

        print(self.headers)

 
        super().do_MKCOL()
        
    def do_COPY(self):
    
        print(self.headers)

   
        super().do_COPY()

    def do_MOVE(self):
 
        print(self.headers)


        super().do_MOVE()

    def do_LOCK(self):

        print(self.headers)


        super().do_LOCK()

    def do_UNLOCK(self):

        print(self.headers)


        super().do_UNLOCK()

    def do_PATCH(self):

        print(self.headers)


        super().do_PATCH()
        
    def do_TRACE(self):
       
        print(self.headers)

       
        super().do_TRACE()

    def do_CONNECT(self):
        
        print(self.headers)

       
        super().do_CONNECT()

    def do_MKCALENDAR(self):
        
        print(self.headers)

        
        super().do_MKCALENDAR()

    def do_MSEARCH(self):
     
        print(self.headers)

       
        super().do_MSEARCH()

    def do_NOTIFY(self):
       
        print(self.headers)

       
        super().do_NOTIFY()

    def do_SUBSCRIBE(self):
        
        print(self.headers)

        
        super().do_SUBSCRIBE()

    def do_UNSUBSCRIBE(self):
        
        print(self.headers)

        
        super().do_UNSUBSCRIBE()

    def do_REPORT(self):
        
        print(self.headers)

        
        super().do_REPORT()

    def do_MKACTIVITY(self):
        
        print(self.headers)

        
        super().do_MKACTIVITY()

    def do_CHECKOUT(self):
        
        print(self.headers)

        
        super().do_CHECKOUT()

    def do_MERGE(self):
       
        print(self.headers)

       
        super().do_MERGE()


if __name__ == '__main__':
    server_address = ('', 8000)
    httpd = HTTPServer(server_address, LoggingHandler)
    httpd.serve_forever()

import http.server
import socketserver

PORT = 8000 

Handler = http.server.SimpleHTTPRequestHandler

with socketserver.TCPServer(("", PORT), Handler) as httpd:
    print("serving at port", PORT)
    httpd.serve_forever()


import sqlite3
from http.server import BaseHTTPRequestHandler, HTTPServer
from urllib.parse import urlparse, parse_qs


class BaseHandler(BaseHTTPRequestHandler):
    def do_GET(self):
       
        url = urlparse(self.path)
        path = url.path
        query = parse_qs(url.query)


        if path == '/':
            self.handle_index()
        elif path == '/login':
            self.handle_login(query)
        elif path == '/logout':
            self.handle_logout()
        elif path == '/register':
            self.handle_register(query)
        else:
            self.handle_404()

    def do_POST(self):

        url = urlparse(self.path)
        path = url.path
        query = parse_qs(url.query)


        if path == '/login':
            self.handle_login(query)
        elif path == '/register':
            self.handle_register(query)
        else:
            self.handle_404()

    def handle_index(self):

        if 'username' in self.session:

            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
        else:

            self.send_response(302)
            self.send_header("Location", "/login")
            self.end_headers()

    def handle_login(self, query):

        if 'username' in self.session:

            self.send_response(302)
            self.send_header("Location ", "/")
            self.end_headers()
        else:
   
            if 'username' in query and 'password' in query:
                
                user = db.get_user(query['username'][0])
                if user and user[1] == query['password'][0]:
                    
                    self.session['username'] = user[0]
                    self.send_response(302)
                    self.send_header("Location ", "/")
                    self.end_headers()
                else:
                  
                    self.send_response(200)
                    self.send_header("Content-type", "text/html")
                    self.end_headers()
                    self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
            else:
                
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")

    def handle_logout(self):
        
        if 'username' in self.session:
            
            del self.session['username']
            self.send_response(302)
            self.send_header("Location", "/login")
            self.end_headers()
        else:
           
            self.send_response(302)
            self.send_header("Location", "/login")
            self.end_headers()

    def handle_register(self, query):
        
        if 'username' in self.session:
           
            self.send_response(302)
            self.send_header("Location ", "/")
            self.end_headers()
        else:
           
            if 'username' in query and 'password' in query:
               
                user = db.get_user(query['username'][0])
                if user:
                    
                    self.send_response(200)
                    self.send_header("Content-type", "text/html")
                    self.end_headers()
                    self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")
                else:
                   
                    db.add_user(query['username'][0], query['password'][0])
                    self.send_response(302)
                    self.send_header("Location", "/login")
                    self.end_headers()
            else:
               
                self.send_response(200)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")

    def handle_404(self):
        
        self.send_response(404)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")

    def handle_500(self):
      
        self.send_response(500)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(b"<!DOCTYPE html><html><body><h1>My First Heading</h1><p>My first paragraph.</p></body></html>")

    def do_GET(self):
       
        url = urlparse(self.path)
        
        query = parse_qs(url.query)
        
        if url.path == "/":
            self.handle_index()
        
        elif url.path == "/login":
            self.handle_login(query)
       
        elif url.path == "/logout":
            self.handle_logout()
       
        elif url.path == "/register":
            self.handle_register(query)
       
        elif url.path == "/404":
            self.handle_404()
        
        elif url.path == "/500":
            self.handle_500()
        else:
            
            self.handle_404()


if __name__ == "__main__":


   
    server = HTTPServer(("", 8080), BaseHandler)
    
    server.serve_forever()
    
    server.server_close()



class DB:
    def __init__(self):
        self.db = sqlite3.connect('test.db')
        self.cursor = self.db.cursor()
        self.cursor.execute('CREATE TABLE IF NOT EXISTS users (username TEXT, password TEXT)')
        self.db.commit()

    def get_user(self, username):
        self.cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
        return self.cursor.fetchone()

    def add_user(self, username, password):
        self.cursor.execute('INSERT INTO users VALUES (?, ?)', (username, password))
        self.db.commit()

    def __del__(self):
        self.db.close()


db = DB()


class LoginHandler(BaseHandler):
    def get(self):
        self.render('login.html')

    def post(self):
        username = self.get_argument('username')
        password = self.get_argument('password')
        user = db.get_user(username)
        if user and user[1] == password:
            self.set_secure_cookie('user', username)
            self.redirect('/')
        else:
            self.write('Login failed')
            self.render('login.html')


class LogoutHandler(BaseHandler):
    def get(self):
        self.clear_cookie('user')
        self.redirect('/login')


class MainHandler(BaseHandler):
    def get(self):
        self.render('index.html')

class RegisterHandler(BaseHandler):
    def get(self):
        self.render('register.html')

    def post(self):
        username = self.get_argument('username')
        password = self.get_argument('password')
        user = db.get_user(username)
        if user:
            self.write('Username already taken')
            self.render('register.html')
        else:
            db.add_user(username, password)
            self.redirect('/login')

