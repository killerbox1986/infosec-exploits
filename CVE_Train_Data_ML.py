# The purpose of this code below is to train CVE data to whatever your goal might be.
# You could train data and create applications based on just CVE data.
# The data is pulled and stored in a local database instance.
# A push notification system could be created to alert your cyber security team when a new CVE has been released, affecting your internal or external network/applications environment.
# Uses a CVE API to pull data for further analysis.
# Target certain vendors. Create flags according to your environment applications which calculates your organization's risk exposure.
# The code works but unfinished... the code will be updated with a POC example ML model in the next couple weeks.


import os
import subprocess
import sys
import nvdlib

def main():
    
    os.mkdir("web_server")
    os.chdir("web_server")
   
    with open("package.json", "w") as f:
        f.write("""{
  "name": "Da web server version 0",
  "version": "0.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
""")

    with open("index.js", "w") as f:
        f.write("""const https = require('https'); const fs = require('fs'); const path = require('path'); const express = require('express'); const app = express(); const port = 3000; const options = { key: fs.readFileSync(path.join(__dirname, 'server.key')), cert: fs.readFileSync(path.join(__dirname, 'server.cert')) }; app.get('/', (req, res) => res.send('uid')); https.createServer(options, app).listen(port, () => console.log('Example app listening on port 3000!'));
""")


    subprocess.run(["openssl", "req", "-x509", "-nodes", "-days", "365", "-newkey", "rsa:2048", "-keyout", "server.key ", "-out", "server.cert", "-subj", "/C=US/ST=California/L=San Francisco/O=Example Company/OU=Example Department/CN=example.com"])

    subprocess.run(["sudo", "apt", "install", "nodejs"])

    subprocess.run(["sudo", "apt", "install", "npm"])

    subprocess.run(["npm", "install", "express"])

    subprocess.run(["npm", "install", "https"])

    subprocess.run(["npm", "install", "fs"])

    subprocess.run(["npm", "install", "path"])

    subprocess.run(["npm", "start"])

    os.chdir("..")

    os.mkdir("web_client")

    os.chdir("web_client")

    with open("package.json", "w") as f:
        f.write("""{ "name": "Web server version 0", "version": "0.0.0", "description": "", "main": "index.js", "scripts": { "start": "node index.js" }, "keywords": [], "author": "", "license": "ISC" }
""")
    with open("index.js", "w") as f:
        f.write("""const https = require('https'); const fs = require('fs'); const path = require('path'); const express = require('express'); const app = express(); const port = 3000; const options = { key: fs.readFileSync(path.join(__dirname, 'server.key')), cert: fs.readFileSync(path.join(__dirname, 'server.cert')) }; app.get('/', (req, res) => res.send('uid')); https.createServer(options, app).listen(port, () => console.log('Example app listening on port 3000!'));
""")
    subprocess.run(["openssl", "req", "-x509", "-nodes", "-days", "365", "-newkey", "rsa:2048", "-keyout", "server.key ", "-out", "server.cert", "-subj", "/C=US/ST=California/L=San Francisco/O=Example Company/OU=Example Department/CN=example.com"])



    subprocess.run(["sudo", "apt", " install", "postgresql"])
    subprocess.run(["sudo", "apt", " install", "postgresql-contrib"])
    subprocess.run(["sudo", "apt", " install", "libpq-dev"])
    subprocess.run(["sudo", "apt", " install", "python3-psycopg2"])
    subprocess.run(["sudo", "apt", " install", "python3-pip"])
    subprocess.run(["pip3", "install", "psycopg2"])
    subprocess.run(["pip3", "install", "nvdlib"])

    subprocess.run(["sudo", "su", "postgres"])
    subprocess.run(["psql"])
    subprocess.run(["CREATE DATABASE cve_db;"])
    subprocess.run(["CREATE DATABASE cpe_db;"])
    subprocess.run(["\q"])
    subprocess.run(["exit"])
    subprocess.run(["psql", "-d", "cve_db", "-f", "cve.sql"])
    subprocess.run(["psql", "-d", "cpe_db", "-f", "cpe.sql"])
    subprocess.run(["psql", "-d", "cve_db", "-f", "cve_data.sql"])
    subprocess.run(["psql", "-d", "cpe_db", "-f", "cpe_data.sql"])

    subprocess.run(["sudo", "apt", " install", "python3-flask"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-sqlalchemy"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-login"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-wtf"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-bcrypt"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-mail"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-bootstrap"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-moment"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-migrate"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-babel"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-debugtoolbar"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-shell-ipython"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-whooshalchemy"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-sse"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-socketio"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-redis"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-cors"])
    subprocess.run(["sudo", "apt", " install", "python3-flask-ldap3-login"])





subprocess.run(["sudo", "apt", " install", "python3-numpy"])
subprocess.run(["sudo", "apt", " install", "python3-scipy"])
subprocess.run(["sudo", "apt", " install", "python3-matplotlib"])
subprocess.run(["sudo", "apt", " install", "python3-pandas"])
subprocess.run(["sudo", "apt", " install", "python3-sklearn"])
subprocess.run(["sudo", "apt", " install", "python3-seaborn"])
subprocess.run(["sudo", "apt", " install", "python3-statsmodels"])
subprocess.run(["sudo", "apt", " install", "python3-pydot"])
subprocess.run(["sudo", "apt", " install", "python3-pydotplus"])
subprocess.run(["sudo", "apt", " install", "python3-pydot-ng"])
subprocess.run(["sudo", "apt", " install", "python3-graphviz"])
subprocess.run(["sudo", "apt", " install", "python3-pip"])
subprocess.run(["pip3", "install", "pydot"])
subprocess.run(["pip3", "install", "pydotplus"])
subprocess.run(["pip3", "install", "pydot-ng"])
subprocess.run(["pip3", "install", "graphviz"])
subprocess.run(["pip3", "install", "scikit-learn"])
subprocess.run(["pip3", "install", "seaborn"])
subprocess.run(["pip3", "install", "statsmodels"])
subprocess.run(["pip3", "install", "pandas"])
subprocess.run(["pip3", "install", "numpy"])
subprocess.run(["pip3", "install", "scipy"])
subprocess.run(["pip3", "install", "matplotlib"])

r = nvdlib.searchCVE(pubStartDate = '2022-09-01 00:00', pubEndDate = '2023-01-04 00:00')
for cve in r: print(cve['cve']['CVE_data_meta']['ID'])

